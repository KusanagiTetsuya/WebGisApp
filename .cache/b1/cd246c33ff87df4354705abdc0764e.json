{"id":"gQDJ","dependencies":[{"name":"D:\\QGis Lecture\\web-mapping-application\\package.json","includedInParent":true,"mtime":1643103661803},{"name":"D:\\QGis Lecture\\web-mapping-application\\node_modules\\threads\\package.json","includedInParent":true,"mtime":1643010441558},{"name":"../symbols","loc":{"line":1,"column":45},"parent":"D:\\QGis Lecture\\web-mapping-application\\node_modules\\threads\\dist-esm\\master\\thread.js","resolved":"D:\\QGis Lecture\\web-mapping-application\\node_modules\\threads\\dist-esm\\symbols.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Thread=void 0;var e=require(\"../symbols\");function r(e){throw Error(e)}const s={errors:s=>s[e.$errors]||r(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\"),events:s=>s[e.$events]||r(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\"),terminate:r=>r[e.$terminate]()};exports.Thread=s;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":0}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":13}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":20}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":35}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":43}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":56}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":57}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":64}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":68}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":76}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":88}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":90}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":94}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":96}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":1,"column":0},"generated":{"line":1,"column":104}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":2,"column":0},"generated":{"line":1,"column":118}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"fail","original":{"line":2,"column":9},"generated":{"line":1,"column":127}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"message","original":{"line":2,"column":14},"generated":{"line":1,"column":129}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"Error","original":{"line":3,"column":10},"generated":{"line":1,"column":132}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"Error","original":{"line":3,"column":10},"generated":{"line":1,"column":138}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"message","original":{"line":3,"column":16},"generated":{"line":1,"column":144}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":147}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"Thread","original":{"line":6,"column":13},"generated":{"line":1,"column":153}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":22},"generated":{"line":1,"column":155}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"errors","original":{"line":8,"column":4},"generated":{"line":1,"column":156}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":8,"column":11},"generated":{"line":1,"column":163}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":9,"column":15},"generated":{"line":1,"column":166}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"$errors","original":{"line":9,"column":22},"generated":{"line":1,"column":168}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":21},"generated":{"line":1,"column":170}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"fail","original":{"line":9,"column":34},"generated":{"line":1,"column":180}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":9,"column":39},"generated":{"line":1,"column":182}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"events","original":{"line":12,"column":4},"generated":{"line":1,"column":285}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":12,"column":11},"generated":{"line":1,"column":292}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":13,"column":15},"generated":{"line":1,"column":295}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"$events","original":{"line":13,"column":22},"generated":{"line":1,"column":297}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":21},"generated":{"line":1,"column":299}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"fail","original":{"line":13,"column":34},"generated":{"line":1,"column":309}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":13,"column":39},"generated":{"line":1,"column":311}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"terminate","original":{"line":16,"column":4},"generated":{"line":1,"column":415}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":16,"column":14},"generated":{"line":1,"column":425}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"thread","original":{"line":17,"column":15},"generated":{"line":1,"column":428}},{"source":"node_modules/threads/dist-esm/master/thread.js","name":"$terminate","original":{"line":17,"column":22},"generated":{"line":1,"column":430}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":17,"column":21},"generated":{"line":1,"column":432}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":447}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":455}},{"source":"node_modules/threads/dist-esm/master/thread.js","original":{"line":6,"column":7},"generated":{"line":1,"column":462}}],"sources":{"node_modules/threads/dist-esm/master/thread.js":"import { $errors, $events, $terminate } from \"../symbols\";\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexport const Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[$terminate]();\n    }\n};\n"},"lineCount":null}},"error":null,"hash":"01aad26fbcffe72b31b1c0b3686b4373","cacheData":{"env":{}}}